# -*- coding: utf-8 -*-
"""classify_images_of_objects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lk0ydX9DjNbpOH36QXhssZ_C1vSxRjEP

# **Using Keras to classify images of objects**

1-prepare & explore data
"""

import numpy as np
import pandas as pd

#import pachages
from tensorflow import keras
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Activation

#load the training and testing data
# (X_train), (y_train) ara the training images and lables
# (X_test), (X_test) are the test images and labels
(X_train, Y_train),(X_test, Y_test)= cifar10.load_data()

X_train.shape,Y_train.shape

X_test.shape,Y_test.shape

# we will split the data into 50,000 training images and 10,000 testing images.
# we need to reshape the image to a one-dimensional array.
# in this case each image has 3 color channels (red ,green and blue) of 32*32 pixels hence 3*32*3 = 3072
X_train= X_train.reshape(50000,3072)
X_test= X_test.reshape(10000,3072)

#10 classes of object namely: airplanes,automobiles,birds,cats,deers,dogs,frogs,horses,ships, and trucks.
# we want to convert this into a 10-entry encoded vector comprised of 0s and 1 in the entry corresponding to the digit.
classes = 10
Y_train = np_utils.to_categorical(Y_train,classes)
Y_test = np_utils.to_categorical(Y_test,classes)

Y_train,Y_test

"""2- Define the neural network architecture"""

# Before calling our main funcation we need to set :
## the size of the input layer (the size of the MNIST images),
## the number of hidden neurons,
## the number of epochs to train the network,
## the mini batch size:
input_size = 3072
batch_size = 100
epochs = 100

from keras.src.engine import sequential
model = Sequential([
    Dense(1024,input_dim=input_size),
    Activation('relue'),
    Dense(512),
    Activation('relue'),
    Dense(512),
    Activation('sigmoid')
    Dense(classes),
    Activation('softmax')
    ])

"""3- Compile the neural net"""

model.compile(loss='categorical_crossentropy', metrics =['accuarcy'], optimizer='sgd')

keras.utils.plot_model(model, show_shapes=True, rankdir="BT")

"""4- Fit/train the neural net"""

model.fit(X_train, Y_train, batch_size= batch_size, epochs= epochs, verbose= 1)

"""5- Evalute the nural net"""

score = model.evaluate(X_test, Y_test,verbose=1)
print("Test accuarcy:", score[1])

"""6- Make prediction/classification for unseen data"""

#not yet until we enhanced the results
predictions = model.predict(X_test)
predictions